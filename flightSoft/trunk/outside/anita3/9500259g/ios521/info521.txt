











                                  Acromag, Inc.
                                  30765 S.Wixom Road
                                    P.O. Box 437
                              Wixom, Michigan 48393-7037

                                Phone: (248)295-0310
                                 FAX: (248)624-9234

                               Linux Software Library
                         Information File for the IOS521 Board
                                        V1.0
                                      04/01/09




               The  information  in this manual is subject to  change
               without notice.   Acromag,  Inc.  makes no warranty of
               any kind with regard to this material and accompanying
               software,  including, but not limited to , the implied
               warranties  of  merchantability  and  fitness  for   a
               particular   purpose.    Acromag,   Inc.   assumes  no
               responsibility for any errors that may appear in  this
               manual and accompanying software.



































	1. Overview

	This  "information"  file  contains a description of  the library
	programs used for the following  Acromag  Industrial  I/O  Board:

	     IOS521 Serial I/O Board(RS-422)
	
	2. Introduction

	The  software  for  the IOS521  Serial  I/O board is  implemented  
	as a library of "C" functions.  This will  make  it  possible  to
	utilize the board by simply linking  the user's  code   with  the
	provided   library   and   making   function   calls   for   each
	"command"  to be accomplished.  Most of the function  calls  will
	require  a few parameters or the address of a parameter block  to
	be  passed.   The  parameters will  include  the  board  address,
	configuration  information,  data storage addresses,  and  status
	information. These functions accomplish the following tasks:

	     - Configuration
	     - Read ID
	     - Read Status
	     - Read Character
	     - Write Character
	     - Receiver and Modem Status Interrupts

	Also  included  is  a demonstration program which shows  how  the
	library routines  are  used.    It is  a helpful program  to  use
	when first installing the board, checking  it  out, and  learning
	how it works.


	3. List of Files

	The library  software  for  each  Acromag  I/O  board  is  in   a
	correspondingly named subdirectory on the supplied media.  The
	files  which  make  up  the  library  for  the IOS521  board  are 
	stored in the subdirectory named "IOS521".

	There  are two types of program files provided.   Library program
	files are the files which make up the "library".  Support program
	files contain example programs which show how to use the library.


	3.1 Library Program Files

	The  following  files are included on the supplied  media  and
	make up the actual "library" software.

	     portio.h  - include file.
	     rsts521.c - read ID.
	     uart.c    - serial port initialization.
	     portio.c  - serial port functions.




				   1







	3.2 Support Program Files

	The  following files are included on the supplied media.   The
	test program demonstrates how  the library  programs may be used.

	drvr521.c - test program to  demonstrate  library  programs.
	ioscarrier.h - include file for ioscarrier support.
	ioscarrier.c - ioscarrier support see infoCarrier.txt.



	4. Software Installation

	It  is strongly advised that the user make a backup copy  of  the
	distribution  media  and  that  the   original  media  be  stored
	in a safe place.

	The  software is installed by simply copying the library files to
	the  user's  work directory and compiling and  linking  with  the
	user's application program.


	5. Hardware Installation

	For proper installation of each Acromag I/O board the user should
	refer  to  the appropriate user's manual.


	6. Usage of the Library and Support Programs

	The  software is installed  by copying the supplied files to your
	work  directory and compiling  and linking  with your application
	program.

        It  is recommended that the user read the  User's Manual for  the
        board  and  thoroughly  familiarize themselves with the hardware.

        For a new user to become familiar with the Acromag Library it may
        be  most  "straight forward"  to proceed in the following manner:



















				   2





             (a) Build and load the Acromag device driver module.

                 i)   See  the  information  file  in  the device driver
                 directory "/home/ios/devios/info.txt" for information
                 about building and loading the device driver module.

             (b) Build and execute the Acromag Library Demonstration.

                 i)  Copy the Acromag Library routines from the "ios521"
                 directory of the source media to a new directory  under
                 /home/ios/ios521.

                 ii)  Copy  the ioscarrier  support routines  from  the
                 "ioscarrier" directory of the source media  to  a  new
                 directory  under   /home/ios/ioscarrier. 

                 iii) Use the makefile to build the project.

                 iv)  Launch  the  debugger,  "gdb a.out"  use the 'run' 
                 command to start the program or  './a.out' without the
                 debugger. 

                 v)   The  Acromag  Demonstration  program  menu  should
                 appear  on  the  target processor's  console  terminal.




































				   3





	The following menu is displayed:

	     IOS521 Library Demonstration Version A

	     1. Exit this Program
	     2. Set Carrier Base Address
	     3. Set IOS Slot Letter
	     4. Read ID PROM Command
	     5. Attach Exception Handler
	     6. Open Serial IO Port
	     7. Set Data Format, Baud Rate
	     8. RS422 Control
	     9. Transmit BREAK Signal
	    10. FIFO Control
	    11. Loopback Control
	    12. Terminal Emulator
	    13. Close Serial IO Port
	    14. Detach Exception Handler

	    Select:

	To  perform  Serial  I/O,  follow   this sequence of  main  menu
	selections:

	     Select  2: To set the Carrier base address.
	     Select  3: To set the IOS Slot Letter.
	     Select  4: To read the board's ID.
	     Select  5: To attach interrupt handler (skip for polled IO).
	     Select  6: To open the serial IO port.
	     Select  7: To set data format and baud rate.
	     Select  8: To read inputs or control outputs.
	     Select  9: To transmit a break signal.
	     Select 10: To select FIFO control options.
	     Select 11: To select loopback control options.
	     Select 12: To use simple terminal emulator.
	     Select 13: To close the serial IO port.
	     Select 14: To detach interrupt handler (skip for polled IO).

	To use  the example  interrupt  routines  provided,  follow  this
	sequence of main menu selections:

	     Select 2: To set the Carrier base address.
	     Select 3: To set the IOS Slot Letter.
	     Select 5: To attach an interrupt exception handler.


	The example  interrupt  service  routine  will  process  receiver
	interrupts.  Stubs are provided for 
	transmitter  interrupts  and  receiver  line  status  interrupts.











				   4





	6.1 Explanation of Main Demonstration Menu

	Following is an explanation of each menu selection:

	     1. Exit this Program

	     This  selection detaches the interrupt handlers used by  the
	     demonstration  program (if  any  are  attached)  and  causes
	     execution to be returned to the shell.

	     2. Set Carrier Base Address

	     This selection allows the user to display the address of the
	     ioscarrier board being used.

	     3. Set IOS Slot Letter

	     This  selection  allows the user to set or change  the  slot
	     letter of the IOS module being used.  The value entered here
	     will automatically be entered in the IO structure.

	     4. Read ID Command

	     This  menu  selection will call the rsts521()  function  and
	     pass a pointer which points to the ID structure.
	     The contents of the identification PROM are  read  from  the
	     board  and  written  into  this  structure  by the rsts521()
	     function.  The ID information is then displayed.

	     5. Attach Exception Handler

	     This  menu selection allows the user to attach the interrupt
	     exception handler for use with  the  demonstration  program.

	     6. Open Serial I/O Port

	     The current configuration of the I/O port is saved for later
	     restoration.    The  baud rate, parity, stop bits, and other
	     parameters  are  set  to   default  values.  If  successful,
	     a pointer to the IO structure is returned.  If unsuccessful,
	     an error code  for  the  failure  is  placed  in  the global
	     variable 'p_errno'.

	     7. Set Data Formats and Baud Rate

	     The  baud rate,  parity,  stop bits,  and data length can be
	     read, displayed, and altered using this menu selection.

	     8. RS-422 Control

	     The  status of  RS-422  handshake signal lines can  be read,
	     displayed, and altered using this menu selection.

	     9. Transmit BREAK Signal

	     This  menu selection  allows the user to transmit a break to
	     the connected receiver.



				   5





	     10. FIFO Control

	     FIFO  control  consists  of  selecting  the  FIFO  depth and
	     enabling or disabling FIFO operation  using  this selection.

	     11. Loopback Control

	     This  menu selection provides  a  local loopback feature for
	     diagnostic testing of the UART channel.   When  enabled, the
	     output  of  the  UART transmitter  is internally looped back
	     into  the UART receiver.   The RS-422 handshake signal lines
	     are looped back to their corresponding RS-422 inputs.

	     12. Terminal Emulator

	     This menu  selection provides  a  simple  terminal  emulator
	     that performs I/O through the selected and configured serial
	     port.   It  may  be  used to transmit to or receive  from an
	     external serial device.

	     13. Close Serial I/O Port

	     The  serial  port  is   closed  by   restoring the  original
	     configuration of the I/O port.

	     14. Detach Exception Handler

	     This  menu selection is not implemented at this  time and is
	     not generally needed.


	7. Description of Library Program Functions.

	Following  are descriptions of the programs and files which  make
	up the library.

	portio.h - Contains definitions and structures.

	rsts521()  - This  module  is  used  to  perform  the  "Read  ID"
	function for the IOS521 board.    A  pointer to the  ID  Block is
	passed to this routine.  The routine  uses a pointer  within  the
	ID  Block  to  reference  registers  on  the  board and transfers
	information from the board to the ID Block.

	  calling sequence:

	     rsts521(ptr);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  ID Block structure.









				   6





	p_open()  - Opens an IO port.   The current configuration of  the
	I/O port is saved for later restoration.   The baud rate, parity,
	stop bits,  and  other  parameters  are  set  to  default values.
	If successful, a pointer to  the  IO  structure is  returned.  If
	unsuccessful, an error code for  the failure  is  placed  in  the
	global variable 'p_errno'.

	  calling sequence:

	     IO *p_open(port);

	     where:
		  return (IO*) pointer to open port or error in p_errno
		  port (unsigned) port to open



	p_close()  - Closes an open IO port.    The serial port is closed
	by  restoring the original configuration of the I/O port  and  by
	marking the serial port data structure unused.

	  calling sequence:

	     int p_close(io);

	     where:
		  return (int) 0 if successful or
			NO_HARDWARE - not supported by hardware
		  io (pointer*) to struct IO




	setdatalen() - This function configures the serial  port (pointed
	to by io) to one  of the  data length  values stored in  the data
	length structure.   The variable  'pos'  specifies  the  position
	of the desired data length parameter in the array.


	  calling sequence:

	     int setdatalen(io, pos)

	     Where:
		  return (int) 0 if successful or
			ARGUMENT_RANGE  - argument out of range
			BAD_FUNCTION    - function not supported
			NO_HARDWARE     - not supported by hardware
		  io (pointer*) to struct IO
		  pos (byte) array position of value to install










				   7





	setparity() - This  function configures the serial  port (pointed
	to by io) to one of  the  parity  values  stored  in  the  parity
	structure.   The variable  'pos'  specifies  the  position of the
	desired parity parameter in the array.


	  calling sequence:

	     int setparity(io, pos)

	     Where:
		  return (int) 0 if successful or
			ARGUMENT_RANGE  - argument out of range
			BAD_FUNCTION    - function not supported
			NO_HARDWARE     - not supported by hardware
		  io (pointer*) to struct IO
		  pos (byte) array position of value to install



	setstops() - This  function  configures the serial  port (pointed
	to by io) to one of  the  stop bit values stored  in the stop bit
	data structure.   The variable  'pos'  specifies the  position of
	the desired stop bit parameter in the array.


	  calling sequence:

	     int setstops(io, pos)

	     Where:
		  return (int) 0 if successful or
			ARGUMENT_RANGE  - argument out of range
			BAD_FUNCTION    - function not supported
			NO_HARDWARE     - not supported by hardware
		  io (pointer*) to struct IO
		  pos (byte) array position of value to install



	setfifocontrol() -  This  function  configures  the  serial  port
	(pointed to by io) to one of  the  FIFO control values stored  in
	the FIFO control data structure.   The variable  'pos'  specifies
	the  position of the desired FIFO control parameter in the array.


	  calling sequence:

	     int setfifocontrol(io, pos)

	     Where:
		  return (int) 0 if successful or
			ARGUMENT_RANGE  - argument out of range
			BAD_FUNCTION    - function not supported
			NO_HARDWARE     - not supported by hardware
		  io (pointer*) to struct IO
		  pos (byte) array position of value to install



				   8




	setfifotrigger() -  This  function  configures  the  serial  port
	(pointed to by io) to one of  the  FIFO trigger values stored  in
	the FIFO trigger data structure.   The variable  'pos'  specifies
	the  position of the desired FIFO trigger parameter in the array.


	  calling sequence:

	     int setfifotrigger(io, pos)

	     Where:
		  return (int) 0 if successful or
			ARGUMENT_RANGE  - argument out of range
			BAD_FUNCTION    - function not supported
			NO_HARDWARE     - not supported by hardware
		  io (pointer*) to struct IO
		  pos (byte) array position of value to install



	setbaud() - This  function  configures  the serial  port (pointed
	to by io) to one of the  baud rate values stored in the baud rate
	data structure.   The variable  'pos'  specifies the  position of
	the desired baud rate parameter in the array.


	  calling sequence:

	     int setbaud(io, pos)

	     Where:
		  return (int) 0 if successful or
			ARGUMENT_RANGE  - argument out of range
			BAD_FUNCTION    - function not supported
			NO_HARDWARE     - not supported by hardware
		  io (pointer*) to struct IO
		  pos (byte) array position of value to install



	setrts() - This function configures the RTS line of  the  serial
	port (pointed to by io) to the value ( 0 or 1 ) specified by the
	variable 'state'.


	  calling sequence:

	     int setrts(io, state)

	     Where:
		  return (int) 0 if successful or
			ARGUMENT_RANGE - argument out of range
			BAD_FUNCTION   - function not supported
		  io (pointer*) to struct IO
		  state (bool) value (0 or 1)






				   9





	setdtr() - This function configures the DTR line of  the  serial
	port (pointed to by io) to the value ( 0 or 1 ) specified by the
	variable 'state'.


	  calling sequence:

	     int setdtr(io, state)

	     Where:
		  return (int) 0 if successful or
			ARGUMENT_RANGE - argument out of range
			BAD_FUNCTION   - function not supported
		  io (pointer*) to struct IO
		  state (bool) value (0 or 1)



	setgpo1() - This function configures the GPO1 line of the serial
	port (pointed to by io) to the value ( 0 or 1 ) specified by the
	variable 'state'.


	  calling sequence:

	     int setgpo1(io, state)

	     Where:
		  return (int) 0 if successful or
			ARGUMENT_RANGE - argument out of range
			BAD_FUNCTION   - function not supported
		  io (pointer*) to struct IO
		  state (bool) value (0 or 1)




	setgpo2() - This function configures the GPO2 line of the serial
	port (pointed to by io) to the value ( 0 or 1 ) specified by the
	variable 'state'.


	  calling sequence:

	     int setgpo2(io, state)

	     Where:
		  return (int) 0 if successful or
			ARGUMENT_RANGE - argument out of range
			BAD_FUNCTION   - function not supported
		  io (pointer*) to struct IO
		  state (bool) value (0 or 1)








				  10





	setloopback() - This function configures the loopback bit of the
	serial port (pointed to by io) to the value ( 0 or 1 ) specified
	by the variable 'state'.

	  calling sequence:

	     int setloopback(io, state)

	     Where:
		  return (int) 0 if successful or
			ARGUMENT_RANGE - argument out of range
			BAD_FUNCTION   - function not supported
		  io (pointer*) to struct IO
		  state (bool) value (0 or 1)


	getdl() - Using  the  serial  port  pointer  'io', this  function
	returns  the array  position of  the current setting in  the data
	length structure.

	  calling sequence:

	     int getdl(io)

	     Where:
		  return (int) -1 for error or array position of current
			 setting in the data length structure
		  io (pointer*) to struct IO


	getparity() - Using  the  serial port pointer 'io', this function
	returns  the array  position of  the current setting in  the parity
	data structure.

	  calling sequence:

	     int getparity(io)

	     Where:
		  return (int) -1 for error or array position of current
			 setting in the parity data structure
		  io (pointer*) to struct IO


	getstops() - Using  the  serial  port pointer 'io', this function
	returns  the array  position of  the current setting in  the stop
	bit data structure.

	  calling sequence:

	     int getstops(io)

	     Where:
		  return (int) -1 for error or array position of current
			 setting in the stop bit data structure
		  io (pointer*) to struct IO




				  11







	getbaud() - Using the serial  port  pointer  'io', this  function
	returns  the array  position of  the current setting in  the baud
	rate data structure.


	  calling sequence:

	     int getbaud(io)

	     Where:
		  return (int) -1 for error or array position of current
			 setting in the data length structure
		  io (pointer*) to struct IO




	getrts() - Using the  serial  port  pointer  'io', this  function
	returns  the array  position of  the current setting in  the  rts
	data structure.


	  calling sequence:

	     int getrts(io)

	     Where:
		  return (int) BAD_FUNCTION for  error or array  position
			 of current setting in the rst data structure
		  io (pointer*) to struct IO




	getdtr() - Using the  serial  port  pointer  'io', this  function
	returns  the array  position of  the current setting in  the  dtr
	data structure.


	  calling sequence:

	     int getdtr(io)

	     Where:
		  return (int) BAD_FUNCTION for  error or array  position
			 of current setting in the dtr data structure
		  io (pointer*) to struct IO











				  12







	getgpo1() - Using the serial  port  pointer  'io', this  function
	returns  the array  position of  the current setting in the  gpo1
	data structure.


	  calling sequence:

	     int getgpo1(io)

	     Where:
		  return (int) BAD_FUNCTION for  error or array  position
			 of current setting in the gpo1 data structure
		  io (pointer*) to struct IO




	getgpo2() - Using the  serial  port  pointer 'io', this  function
	returns  the array  position of  the current setting in the  gpo2
	data structure.


	  calling sequence:

	     int getgpo2(io)

	     Where:
		  return (int) BAD_FUNCTION for  error or array  position
			 of current setting in the gpo2 data structure
		  io (pointer*) to struct IO




	getfifocontrol() -  Using  the  serial  port  pointer 'io',  this
	function returns the array position of the current setting in the
	fifocontrol data structure.


	  calling sequence:

	     int getfifocontrol(io)

	     Where:
		  return (int) BAD_FUNCTION for  error or array  position
			 of current setting in the fifocontrol  structure
		  io (pointer*) to struct IO











				  13







	getfifotrigger() -  Using  the  serial  port  pointer 'io',  this
	function returns the array position of the current setting in the
	fifotrigger data structure.


	  calling sequence:

	     int getfifotrigger(io)

	     Where:
		  return (int) BAD_FUNCTION for  error or array  position
			 of current setting in the fifotrigger  structure
		  io (pointer*) to struct IO




	getloopback() - Using the serial port pointer 'io', this function
	returns  the  array  position  of  the  current  setting  in  the
	loopback data structure.


	  calling sequence:

	     int getloopback(io)

	     Where:
		  return (int) BAD_FUNCTION for  error or array  position
			 of current setting in the loopback structure
		  io (pointer*) to struct IO




	getcts() - Using the  serial  port  pointer  'io', this  function
	returns  the current setting TRUE/FALSE of the CTS  signal  line.


	  calling sequence:

	     int getcts(io)

	     Where:
		  return (int) BAD_FUNCTION for error or TRUE/FALSE
		  io (pointer*) to struct IO













				  14







	getdsr() - Using the  serial  port  pointer  'io', this  function
	returns  the current setting TRUE/FALSE of the DSR  signal  line.


	  calling sequence:

	     int getdsr(io)

	     Where:
		  return (int) BAD_FUNCTION for error or TRUE/FALSE
		  io (pointer*) to struct IO




	getdcd() - Using the  serial  port  pointer  'io', this  function
	returns  the current setting TRUE/FALSE of the DCD  signal  line.


	  calling sequence:

	     int getdcd(io)

	     Where:
		  return (int) BAD_FUNCTION for error or TRUE/FALSE
		  io (pointer*) to struct IO




	getri() - Using  the  serial  port  pointer  'io', this  function
	returns  the current setting TRUE/FALSE of the  RI  signal  line.


	  calling sequence:

	     int getri(io)

	     Where:
		  return (int) BAD_FUNCTION for error or TRUE/FALSE
		  io (pointer*) to struct IO

















				  15







	8. Description of Support Programs

	Following  is  a  description of the support  files  and  program
	modules  which  provide  examples  for  the  use  of  the library
	programs.

        ioscarrier.c - This file provides carrier  support  routines.


 

	drvr521.c  - This  is a program which demonstrates the  usage  of
	the library modules.   This program is menu driven and allows the
	user  to   become   familiar  with   the IOS521   board  and  the  
	library software. The user may,through menu selections,configure,
	read from and write to the board.










































				   16

