#include <cstdio>
#include <fstream>
#include <string>
#include <iostream>
#include <zlib.h>
   
#include "TFile.h"
#include "TTree.h"
#include "TSystem.h"
#include "TMath.h"
#include "Math/Interpolator.h"
#include "Math/InterpolationTypes.h"

#include "simpleStructs.h"
#include "RawAnitaEvent.h"  
#include "UsefulAnitaEvent.h"  
#include "AnitaEventCalibrator.h"
#include "AnitaGeomTool.h"
#include "AnitaConventions.h"
#define ACQD_EVENT_DIR "/tmp/anita/acqd/event"
#define ACQD_EVENT_LINK_DIR "/tmp/anita/acqd/event/link"
#define EVENTD_EVENT_DIR "/tmp/anita/eventd/event"
#define EVENTD_EVENT_LINK_DIR "/tmp/anita/eventd/event/link"

using std::string;

Float_t clockVals[260]={-222,-236,-224,-214,-210,-218,-230,-224,-214,-76,114,180,162,124,138,158,164,152,144,132,126,154,160,144,138,138,148,164,150,134,144,160,158,148,148,148,154,158,148,150,154,156,162,158,152,156,162,160,162,162,162,162,-64,-244,-226,-182,-164,-208,-234,-228,-208,-206,-214,-216,-228,-230,-212,-194,-212,-222,-220,-216,-204,-208,-228,-230,-216,-204,-208,-226,-226,-206,-202,-212,-220,-220,-208,-142,100,192,172,152,126,144,164,162,150,150,138,142,162,158,138,130,132,158,166,138,128,146,156,146,140,134,138,152,148,136,134,148,154,154,150,142,150,162,162,152,150,154,126,-156,-250,-226,-192,-172,-206,-236,-230,-218,-216,-210,-212,-226,-218,-206,-212,-220,-226,-218,-214,-212,-230,-234,-216,-216,-212,-224,-234,-222,-212,-214,-226,-220,-216,-204,-60,102,188,168,128,130,154,166,152,152,146,124,152,162,160,138,138,150,162,142,138,158,162,140,140,142,154,160,146,142,152,162,160,156,150,158,162,156,156,158,160,112,-154,-254,-224,-176,-176,-222,-244,-230,-220,-220,-216,-228,-240,-232,-216,-218,-232,-232,-226,-216,-222,-234,-232,-220,-216,-222,-232,-226,-208,-212,-222,-222,-218,-210,-136,108,200,182,150,134,162,174,0,0,0,0,0,0,0,0,0,0};

Float_t discVals[8][260]={
{1.70518,37.7052,13.7052,-26.2948,11.7052,17.7052,1.70518,-6.29482,-10.2948,5.70518,5.70518,-2.29482,7.70518,-2.29482,-6.29482,13.7052,5.70518,-2.29482,1.70518,5.70518,-2.29482,-26.2948,9.70518,29.7052,9.70518,-8.29482,-2.29482,1.70518,13.7052,-34.2948,-14.2948,-2.29482,-6.29482,19.7052,9.70518,1.70518,19.7052,13.7052,-8.29482,1.70518,21.7052,-8.29482,-66.2948,-10.2948,1.70518,5.70518,21.7052,13.7052,21.7052,-6.29482,13.7052,-2.29482,-14.2948,19.7052,25.7052,-12.2948,-48.2948,1.70518,-2.29482,-54.2948,-10.2948,25.7052,1.70518,-6.29482,13.7052,37.7052,13.7052,-42.2948,1.70518,9.70518,-22.2948,5.70518,5.70518,5.70518,-6.29482,7.70518,37.7052,17.7052,-4.29482,-6.29482,-42.2948,-44.2948,5.70518,21.7052,-10.2948,37.7052,9.70518,-34.2948,-18.2948,-2.29482,5.70518,-10.2948,1.70518,-2.29482,9.70518,9.70518,11.7052,17.7052,17.7052,-64.2948,-52.2948,15.7052,35.7052,9.70518,-22.2948,-30.2948,-34.2948,-6.29482,21.7052,17.7052,-18.2948,13.7052,21.7052,15.7052,11.7052,3.70518,-2.29482,-46.2948,-26.2948,21.7052,5.70518,9.70518,17.7052,-6.29482,-22.2948,25.7052,17.7052,-24.2948,21.7052,9.70518,13.7052,1.70518,-18.2948,-30.2948,-16.2948,21.7052,17.7052,5.70518,9.70518,5.70518,15.7052,-38.2948,-6.29482,-18.2948,-38.2948,9.70518,49.7052,59.7052,-34.2948,-32.2948,-6.29482,5.70518,-26.2948,-46.2948,-42.2948,21.7052,29.7052,-2.29482,13.7052,27.7052,13.7052,-24.2948,-10.2948,3.70518,1.70518,-14.2948,-14.2948,17.7052,-6.29482,-12.2948,3.70518,-18.2948,17.7052,13.7052,17.7052,15.7052,-6.29482,-2.29482,1.70518,5.70518,-10.2948,-6.29482,3.70518,-24.2948,-6.29482,29.7052,-2.29482,-6.29482,13.7052,19.7052,-4.29482,-0.294821,17.7052,-8.29482,-30.2948,-10.2948,-10.2948,9.70518,33.7052,-2.29482,-2.29482,11.7052,9.70518,-28.2948,3.70518,21.7052,-0.294821,17.7052,-8.29482,-4.29482,-2.29482,-14.2948,-2.29482,-6.29482,1.70518,13.7052,21.7052,-0.294821,5.70518,17.7052,-18.2948,-8.29482,5.70518,-2.29482,-30.2948,9.70518,9.70518,-6.29482,7.70518,25.7052,17.7052,-14.2948,-6.29482,5.70518,5.70518,-2.29482,-26.2948,-26.2948,13.7052,9.70518,21.7052,35.7052,-10.2948,-54.2948,1.70518,11.7052,-2.29482,9.70518,11.7052,7.70518,-56.2948,0,0,0,0,0,0,0,0,0},
{-14.9641,-18.9641,1.03586,17.0359,-26.9641,1.03586,53.0359,21.0359,-38.9641,-22.9641,-6.96414,-10.9641,13.0359,-4.96414,-4.96414,1.03586,33.0359,9.03586,-6.96414,11.0359,-2.96414,-14.9641,11.0359,-18.9641,-8.96414,17.0359,1.03586,-28.9641,7.03586,21.0359,13.0359,1.03586,19.0359,7.03586,-28.9641,7.03586,5.03586,-4.96414,-6.96414,-6.96414,-10.9641,1.03586,9.03586,-22.9641,-4.96414,37.0359,33.0359,5.03586,-10.9641,1.03586,1.03586,-6.96414,-2.96414,-14.9641,-2.96414,-2.96414,-4.96414,13.0359,29.0359,13.0359,-6.96414,-10.9641,13.0359,25.0359,-22.9641,-2.96414,1.03586,-38.9641,25.0359,37.0359,9.03586,5.03586,-10.9641,-18.9641,-2.96414,1.03586,9.03586,17.0359,21.0359,-2.96414,-12.9641,-2.96414,-16.9641,-54.9641,19.0359,7.03586,9.03586,5.03586,5.03586,-14.9641,13.0359,13.0359,-14.9641,-6.96414,-6.96414,-38.9641,-0.964143,27.0359,25.0359,1.03586,-30.9641,-32.9641,19.0359,25.0359,-16.9641,-6.96414,5.03586,-36.9641,-62.9641,21.0359,69.0359,9.03586,9.03586,-2.96414,-12.9641,-2.96414,-20.9641,-16.9641,-4.96414,19.0359,21.0359,11.0359,5.03586,-14.9641,9.03586,5.03586,-2.96414,-18.9641,-2.96414,25.0359,19.0359,13.0359,-0.964143,-14.9641,-0.964143,-6.96414,-10.9641,-4.96414,13.0359,1.03586,-28.9641,27.0359,17.0359,-6.96414,-10.9641,5.03586,7.03586,-26.9641,-10.9641,5.03586,7.03586,23.0359,17.0359,-10.9641,9.03586,21.0359,-18.9641,-10.9641,-4.96414,-10.9641,1.03586,-16.9641,5.03586,21.0359,25.0359,5.03586,13.0359,-2.96414,-20.9641,-18.9641,-10.9641,7.03586,-0.964143,5.03586,9.03586,9.03586,1.03586,1.03586,27.0359,17.0359,-22.9641,-34.9641,29.0359,5.03586,-14.9641,5.03586,25.0359,17.0359,1.03586,5.03586,-22.9641,-38.9641,-2.96414,29.0359,-10.9641,-30.9641,17.0359,29.0359,5.03586,9.03586,-30.9641,-2.96414,-6.96414,-10.9641,21.0359,21.0359,-40.9641,-14.9641,3.03586,-18.9641,29.0359,47.0359,-4.96414,-34.9641,11.0359,5.03586,-18.9641,-4.96414,5.03586,7.03586,-6.96414,7.03586,5.03586,-6.96414,33.0359,13.0359,-10.9641,23.0359,1.03586,-46.9641,-14.9641,13.0359,-8.96414,-32.9641,17.0359,21.0359,1.03586,1.03586,17.0359,25.0359,5.03586,5.03586,-36.9641,-50.9641,-26.9641,-6.96414,13.0359,25.0359,13.0359,-10.9641,-16.9641,0,0,0,0,0,0,0,0,0},
{-48.5498,17.4502,-2.5498,-24.5498,27.4502,25.4502,5.4502,21.4502,13.4502,-34.5498,-22.5498,5.4502,-6.5498,13.4502,7.4502,-8.5498,-10.5498,5.4502,17.4502,21.4502,9.4502,17.4502,-12.5498,-42.5498,13.4502,23.4502,9.4502,-12.5498,-6.5498,21.4502,21.4502,-58.5498,-58.5498,13.4502,21.4502,21.4502,13.4502,-2.5498,5.4502,1.4502,-6.5498,-10.5498,-6.5498,1.4502,-2.5498,3.4502,11.4502,-2.5498,13.4502,1.4502,17.4502,7.4502,-26.5498,15.4502,-58.5498,-66.5498,29.4502,17.4502,19.4502,7.4502,17.4502,-2.5498,-26.5498,-10.5498,-2.5498,3.4502,-2.5498,29.4502,-30.5498,-30.5498,17.4502,17.4502,-2.5498,1.4502,5.4502,-54.5498,-6.5498,29.4502,57.4502,-18.5498,-10.5498,-2.5498,-10.5498,13.4502,-22.5498,31.4502,7.4502,25.4502,1.4502,-70.5498,-18.5498,15.4502,21.4502,-10.5498,-2.5498,21.4502,-4.5498,5.4502,-0.549801,5.4502,13.4502,7.4502,15.4502,-50.5498,-10.5498,17.4502,21.4502,1.4502,9.4502,-12.5498,1.4502,13.4502,-50.5498,1.4502,29.4502,17.4502,-0.549801,13.4502,21.4502,-6.5498,-36.5498,-2.5498,-30.5498,-38.5498,23.4502,21.4502,-2.5498,-2.5498,11.4502,13.4502,45.4502,1.4502,-56.5498,3.4502,-6.5498,-2.5498,-8.5498,-18.5498,29.4502,3.4502,5.4502,-14.5498,19.4502,19.4502,25.4502,1.4502,-48.5498,7.4502,-20.5498,-26.5498,1.4502,21.4502,15.4502,9.4502,5.4502,5.4502,5.4502,-28.5498,21.4502,13.4502,-42.5498,13.4502,33.4502,17.4502,-2.5498,5.4502,3.4502,3.4502,-26.5498,-16.5498,-2.5498,1.4502,-6.5498,17.4502,33.4502,5.4502,13.4502,1.4502,-6.5498,-18.5498,-18.5498,-2.5498,-38.5498,15.4502,25.4502,17.4502,-6.5498,5.4502,-6.5498,-48.5498,33.4502,5.4502,-2.5498,-18.5498,9.4502,13.4502,5.4502,3.4502,-2.5498,1.4502,-10.5498,5.4502,1.4502,-10.5498,1.4502,13.4502,9.4502,-12.5498,13.4502,25.4502,-10.5498,-10.5498,-2.5498,17.4502,25.4502,-42.5498,-56.5498,-0.549801,13.4502,9.4502,1.4502,5.4502,7.4502,11.4502,9.4502,-12.5498,1.4502,29.4502,9.4502,-26.5498,-26.5498,-26.5498,1.4502,13.4502,-16.5498,-22.5498,9.4502,37.4502,17.4502,17.4502,-2.5498,-6.5498,-6.5498,-2.5498,7.4502,-38.5498,-14.5498,-6.5498,-26.5498,-6.5498,53.4502,0,0,0,0,0,0,0,0,0},
{14.494,0.494024,10.494,28.494,-81.506,-71.506,58.494,70.494,-5.50598,10.494,10.494,-1.50598,-49.506,-49.506,-1.50598,-1.50598,6.49402,18.494,26.494,26.494,18.494,2.49402,-17.506,14.494,-37.506,-45.506,6.49402,22.494,-9.50598,6.49402,18.494,-5.50598,-9.50598,-23.506,20.494,18.494,-17.506,2.49402,10.494,14.494,30.494,14.494,-45.506,0.494024,2.49402,-9.50598,-33.506,-13.506,26.494,14.494,6.49402,-17.506,2.49402,42.494,-3.50598,0.494024,6.49402,-13.506,-7.50598,-59.506,-41.506,10.494,22.494,6.49402,-5.50598,38.494,30.494,10.494,12.494,12.494,-17.506,-15.506,-11.506,-5.50598,-29.506,-37.506,30.494,24.494,2.49402,8.49402,-17.506,-1.50598,22.494,26.494,-17.506,8.49402,-33.506,-47.506,2.49402,-1.50598,30.494,18.494,-23.506,-17.506,44.494,-29.506,-21.506,14.494,-15.506,10.494,42.494,18.494,6.49402,-33.506,20.494,48.494,-13.506,-25.506,-17.506,-9.50598,2.49402,-11.506,42.494,26.494,-9.50598,18.494,18.494,-9.50598,0.494024,-53.506,-9.50598,28.494,-13.506,2.49402,2.49402,0.494024,18.494,4.49402,-37.506,4.49402,32.494,50.494,34.494,-39.506,-33.506,-45.506,-19.506,26.494,18.494,12.494,14.494,-21.506,-33.506,14.494,22.494,28.494,26.494,2.49402,-39.506,-55.506,2.49402,74.494,-23.506,-53.506,18.494,-61.506,-55.506,6.49402,30.494,22.494,34.494,40.494,18.494,-61.506,-35.506,26.494,10.494,2.49402,-21.506,-13.506,6.49402,-39.506,-5.50598,10.494,26.494,26.494,30.494,10.494,-17.506,-29.506,-33.506,4.49402,-1.50598,14.494,-9.50598,10.494,-9.50598,-25.506,6.49402,26.494,14.494,6.49402,-5.50598,-21.506,-45.506,18.494,44.494,-9.50598,2.49402,34.494,22.494,-37.506,0.494024,-49.506,-27.506,18.494,30.494,10.494,2.49402,34.494,18.494,6.49402,-37.506,-63.506,10.494,-1.50598,14.494,22.494,10.494,0.494024,22.494,-1.50598,10.494,-37.506,-69.506,-1.50598,18.494,22.494,10.494,22.494,2.49402,10.494,-57.506,-29.506,14.494,6.49402,6.49402,22.494,10.494,-21.506,-1.50598,18.494,-1.50598,-17.506,-5.50598,8.49402,18.494,16.494,8.49402,-19.506,14.494,0,0,0,0,0,0,0,0,0},
{-21.8327,20.1673,44.1673,8.16733,10.1673,24.1673,-27.8327,-55.8327,-15.8327,-11.8327,-43.8327,0.167331,42.1673,36.1673,38.1673,10.1673,-15.8327,4.16733,-11.8327,-37.8327,-3.83267,-3.83267,-21.8327,18.1673,36.1673,20.1673,2.16733,4.16733,-7.83267,-31.8327,-15.8327,2.16733,10.1673,12.1673,14.1673,18.1673,-11.8327,2.16733,-7.83267,-45.8327,-43.8327,8.16733,12.1673,8.16733,20.1673,24.1673,12.1673,10.1673,12.1673,-39.8327,-27.8327,-25.8327,4.16733,6.16733,16.1673,20.1673,16.1673,8.16733,18.1673,18.1673,-59.8327,-59.8327,8.16733,22.1673,8.16733,4.16733,12.1673,30.1673,-7.83267,-15.8327,-3.83267,-9.83267,4.16733,2.16733,-35.8327,4.16733,58.1673,-9.83267,-37.8327,14.1673,16.1673,-25.8327,-3.83267,-25.8327,-7.83267,6.16733,4.16733,12.1673,28.1673,28.1673,-23.8327,-25.8327,0.167331,2.16733,18.1673,-19.8327,-43.8327,14.1673,20.1673,20.1673,18.1673,-3.83267,0.167331,-23.8327,16.1673,2.16733,2.16733,16.1673,-3.83267,4.16733,0.167331,20.1673,-45.8327,-23.8327,10.1673,4.16733,18.1673,12.1673,-1.83267,20.1673,30.1673,0.167331,-37.8327,-31.8327,-27.8327,16.1673,12.1673,6.16733,12.1673,16.1673,18.1673,-7.83267,-1.83267,0.167331,0.167331,-43.8327,-31.8327,-3.83267,30.1673,32.1673,0.167331,-7.83267,-11.8327,-11.8327,26.1673,32.1673,-19.8327,-43.8327,24.1673,38.1673,12.1673,-33.8327,-43.8327,28.1673,26.1673,-63.8327,-23.8327,26.1673,24.1673,-1.83267,4.16733,-33.8327,-23.8327,4.16733,10.1673,20.1673,8.16733,8.16733,14.1673,4.16733,-7.83267,-3.83267,-13.8327,-47.8327,-11.8327,20.1673,14.1673,26.1673,8.16733,16.1673,-13.8327,12.1673,-21.8327,-13.8327,0.167331,-11.8327,-3.83267,-3.83267,8.16733,16.1673,16.1673,16.1673,-5.83267,-23.8327,20.1673,56.1673,-3.83267,-47.8327,-31.8327,-1.83267,0.167331,-27.8327,4.16733,28.1673,0.167331,28.1673,44.1673,-13.8327,4.16733,-13.8327,-35.8327,-39.8327,8.16733,-3.83267,16.1673,24.1673,22.1673,-3.83267,-15.8327,-31.8327,4.16733,36.1673,-3.83267,-11.8327,28.1673,-23.8327,-11.8327,12.1673,16.1673,4.16733,-29.8327,0.167331,18.1673,0.167331,2.16733,10.1673,16.1673,-3.83267,-29.8327,-19.8327,12.1673,4.16733,-7.83267,12.1673,22.1673,-7.83267,-5.83267,0.167331,24.1673,12.1673,-35.8327,0,0,0,0,0,0,0,0,0},
{-11.5538,10.4462,-5.55378,0.446215,2.44622,8.44622,20.4462,8.44622,-11.5538,-11.5538,-15.5538,4.44622,44.4462,-25.5538,-53.5538,-7.55378,24.4462,-23.5538,-23.5538,4.44622,4.44622,16.4462,24.4462,-23.5538,-15.5538,8.44622,4.44622,-9.55378,-7.55378,6.44622,16.4462,28.4462,2.44622,-3.55378,-11.5538,-23.5538,8.44622,8.44622,-9.55378,-15.5538,24.4462,36.4462,-19.5538,-31.5538,-25.5538,16.4462,18.4462,-1.55378,16.4462,0.446215,-15.5538,12.4462,14.4462,-19.5538,8.44622,2.44622,-19.5538,-5.55378,70.4462,32.4462,-23.5538,-75.5538,-27.5538,36.4462,-1.55378,-27.5538,-1.55378,10.4462,28.4462,26.4462,16.4462,2.44622,-39.5538,-63.5538,16.4462,52.4462,-27.5538,-1.55378,16.4462,8.44622,-7.55378,-15.5538,-51.5538,10.4462,-23.5538,12.4462,42.4462,32.4462,-3.55378,0.446215,-23.5538,-17.5538,-7.55378,-3.55378,-3.55378,-3.55378,-11.5538,60.4462,28.4462,-11.5538,16.4462,10.4462,-97.5538,8.44622,6.44622,-11.5538,8.44622,20.4462,12.4462,24.4462,-7.55378,-55.5538,20.4462,44.4462,20.4462,-9.55378,0.446215,-7.55378,-7.55378,-7.55378,8.44622,-23.5538,-19.5538,18.4462,30.4462,26.4462,12.4462,-35.5538,12.4462,48.4462,-15.5538,-27.5538,-1.55378,-15.5538,-49.5538,-21.5538,12.4462,44.4462,16.4462,-3.55378,-7.55378,22.4462,10.4462,8.44622,-9.55378,-37.5538,-27.5538,12.4462,20.4462,36.4462,20.4462,-55.5538,8.44622,14.4462,0.446215,16.4462,-3.55378,12.4462,-19.5538,-7.55378,0.446215,-7.55378,-41.5538,-13.5538,24.4462,14.4462,22.4462,32.4462,6.44622,-11.5538,12.4462,24.4462,-55.5538,-91.5538,-55.5538,40.4462,36.4462,18.4462,10.4462,12.4462,22.4462,-1.55378,16.4462,-3.55378,-23.5538,-11.5538,-3.55378,4.44622,-19.5538,-9.55378,26.4462,20.4462,2.44622,20.4462,6.44622,0.446215,-7.55378,-43.5538,-7.55378,-9.55378,-31.5538,24.4462,50.4462,4.44622,8.44622,-19.5538,-39.5538,4.44622,-11.5538,16.4462,24.4462,16.4462,24.4462,-11.5538,-25.5538,-11.5538,-9.55378,-25.5538,-23.5538,18.4462,26.4462,8.44622,24.4462,8.44622,-7.55378,-43.5538,10.4462,28.4462,4.44622,-41.5538,-11.5538,18.4462,8.44622,16.4462,-29.5538,0.446215,8.44622,14.4462,-1.55378,-21.5538,14.4462,4.44622,4.44622,12.4462,-5.55378,22.4462,0.446215,0.446215,8.44622,-31.5538,-3.55378,0,0,0,0,0,0,0,0,0},
{-38.6056,-44.6056,-34.6056,13.3944,7.39442,-0.605578,-12.6056,7.39442,21.3944,27.3944,41.3944,-8.60558,-24.6056,-12.6056,-4.60558,3.39442,-36.6056,-30.6056,1.39442,17.3944,35.3944,19.3944,-16.6056,15.3944,33.3944,7.39442,-40.6056,-26.6056,7.39442,-0.605578,-22.6056,-6.60558,15.3944,35.3944,23.3944,-8.60558,-0.605578,-0.605578,-32.6056,3.39442,5.39442,-60.6056,11.3944,11.3944,-20.6056,-20.6056,39.3944,75.3944,15.3944,-28.6056,-34.6056,-14.6056,-34.6056,-52.6056,-26.6056,5.39442,43.3944,51.3944,33.3944,35.3944,-0.605578,-4.60558,7.39442,-18.6056,-68.6056,-32.6056,-24.6056,3.39442,43.3944,31.3944,-0.605578,21.3944,21.3944,21.3944,-28.6056,-42.6056,-8.60558,5.39442,15.3944,3.39442,15.3944,-24.6056,11.3944,23.3944,-0.605578,-26.6056,5.39442,15.3944,-10.6056,-4.60558,-10.6056,-6.60558,35.3944,11.3944,11.3944,-0.605578,-24.6056,-20.6056,13.3944,33.3944,43.3944,13.3944,-52.6056,-22.6056,-6.60558,5.39442,-8.60558,11.3944,39.3944,7.39442,-20.6056,13.3944,41.3944,15.3944,-44.6056,-64.6056,7.39442,9.39442,-58.6056,-8.60558,11.3944,39.3944,25.3944,13.3944,51.3944,5.39442,-20.6056,-12.6056,-10.6056,-32.6056,-30.6056,-4.60558,1.39442,-0.605578,11.3944,23.3944,23.3944,13.3944,-6.60558,15.3944,7.39442,-28.6056,3.39442,-12.6056,3.39442,1.39442,-14.6056,-4.60558,-20.6056,35.3944,29.3944,-20.6056,7.39442,37.3944,11.3944,-4.60558,-40.6056,-6.60558,-12.6056,-0.605578,-14.6056,-12.6056,23.3944,25.3944,57.3944,3.39442,-36.6056,-0.605578,-36.6056,-12.6056,15.3944,15.3944,11.3944,-12.6056,23.3944,55.3944,7.39442,-40.6056,-8.60558,7.39442,-62.6056,-20.6056,-0.605578,23.3944,37.3944,45.3944,7.39442,7.39442,-30.6056,-38.6056,3.39442,7.39442,-36.6056,-24.6056,13.3944,-0.605578,27.3944,9.39442,-0.605578,19.3944,3.39442,-4.60558,3.39442,-2.60558,13.3944,-22.6056,-64.6056,3.39442,65.3944,9.39442,-4.60558,47.3944,11.3944,-40.6056,-34.6056,-0.605578,-6.60558,-6.60558,-28.6056,11.3944,75.3944,7.39442,-8.60558,-16.6056,7.39442,7.39442,21.3944,-40.6056,-20.6056,-0.605578,-42.6056,3.39442,51.3944,19.3944,-18.6056,-12.6056,7.39442,11.3944,23.3944,7.39442,-48.6056,1.39442,33.3944,11.3944,-34.6056,-8.60558,15.3944,3.39442,-26.6056,-8.60558,11.3944,0,0,0,0,0,0,0,0,0},
{-24.8685,27.1315,9.13147,-10.8685,17.1315,9.13147,19.1315,-14.8685,-0.868526,-6.86853,-24.8685,31.1315,-8.86853,-24.8685,23.1315,39.1315,-10.8685,-54.8685,-28.8685,23.1315,7.13147,3.13147,-12.8685,7.13147,-8.86853,-16.8685,7.13147,-8.86853,11.1315,7.13147,-12.8685,-8.86853,11.1315,51.1315,11.1315,-16.8685,-8.86853,-0.868526,-24.8685,-58.8685,-24.8685,-0.868526,39.1315,69.1315,7.13147,-0.868526,21.1315,5.13147,-40.8685,-56.8685,-14.8685,3.13147,-6.86853,-28.8685,21.1315,59.1315,39.1315,27.1315,19.1315,-16.8685,-84.8685,-34.8685,-8.86853,-32.8685,15.1315,5.13147,-14.8685,35.1315,15.1315,3.13147,-8.86853,-22.8685,1.13147,17.1315,-0.868526,5.13147,7.13147,23.1315,-0.868526,-4.86853,11.1315,-4.86853,-32.8685,-40.8685,7.13147,29.1315,33.1315,15.1315,-4.86853,-42.8685,-4.86853,-10.8685,11.1315,11.1315,13.1315,1.13147,-12.8685,27.1315,13.1315,23.1315,3.13147,-22.8685,-58.8685,3.13147,37.1315,11.1315,-6.86853,29.1315,39.1315,-10.8685,-66.8685,-38.8685,35.1315,11.1315,-8.86853,35.1315,11.1315,-10.8685,-18.8685,41.1315,1.13147,-36.8685,-14.8685,21.1315,-6.86853,-4.86853,1.13147,25.1315,-4.86853,-0.868526,15.1315,-42.8685,-6.86853,-6.86853,-20.8685,25.1315,23.1315,13.1315,23.1315,21.1315,13.1315,-20.8685,-68.8685,-32.8685,23.1315,39.1315,17.1315,15.1315,-0.868526,-8.86853,27.1315,15.1315,-26.8685,-12.8685,7.13147,-6.86853,21.1315,-18.8685,-4.86853,7.13147,1.13147,-52.8685,-16.8685,23.1315,-8.86853,7.13147,47.1315,49.1315,23.1315,-0.868526,-30.8685,-60.8685,-32.8685,-22.8685,3.13147,13.1315,7.13147,51.1315,19.1315,3.13147,29.1315,-22.8685,-36.8685,-12.8685,27.1315,27.1315,-74.8685,-60.8685,23.1315,39.1315,23.1315,19.1315,-26.8685,-10.8685,29.1315,11.1315,-48.8685,-14.8685,11.1315,-20.8685,-20.8685,-8.86853,19.1315,39.1315,15.1315,-2.86853,-12.8685,27.1315,-36.8685,-26.8685,7.13147,-6.86853,21.1315,3.13147,13.1315,9.13147,-36.8685,-34.8685,5.13147,27.1315,-12.8685,5.13147,37.1315,11.1315,-28.8685,-24.8685,5.13147,21.1315,-8.86853,-16.8685,-32.8685,3.13147,31.1315,43.1315,17.1315,-24.8685,7.13147,11.1315,-32.8685,-60.8685,5.13147,11.1315,-6.86853,19.1315,37.1315,7.13147,15.1315,11.1315,7.13147,-2.86853,7.13147,0,0,0,0,0,0,0,0,0}};

string input_file = "thisisntarealfile.root";

//void waveformToPrioritizer(int energy,int exponent);
void waveformToPrioritizer(string input_file);

int normalSingleWrite(unsigned char *buffer, char *filename, int numBytes)
{
    static int errorCounter=0;
   int numObjs;    
   FILE *outfile = fopen (filename, "wb");
   if(outfile == NULL) {
       if(errorCounter<100) {
	   fprintf(stderr,"fopen:  %s\n",filename);
	   errorCounter++;
       }
       return -1;
   }   
   numObjs=fwrite(buffer,numBytes,1,outfile);
   fclose(outfile);
   return 0;
   
}


int is_dir(const char *path)
{
    struct stat s;
 
    if (stat(path, &s))
	return 0;
 
    return S_ISDIR(s.st_mode) ? 1 : 0;
}


void makeDirectories(char *theTmpDir) 
{
    char copyDir[FILENAME_MAX];
    char newDir[FILENAME_MAX];
    char *subDir;
    int retVal;
    
    strncpy(copyDir,theTmpDir,FILENAME_MAX);

    strcpy(newDir,"");

    subDir = strtok(copyDir,"/");
    while(subDir != NULL) {
	sprintf(newDir,"%s/%s",newDir,subDir);
	retVal=is_dir(newDir);
	if(!retVal) {	
	    retVal=mkdir(newDir,0777);
// 	    printf("%s\t%s\n",theTmpDir,newDir);
/* 	    printf("Ret Val %d\n",retVal); */
	}
	subDir = strtok(NULL,"/");
    }
       

}


int makeLink(const char *theFile, const char *theLinkDir)
{
    char *justFile=basename((char *)theFile);
    char newFile[FILENAME_MAX];
    sprintf(newFile,"%s/%s",theLinkDir,justFile);
//    printf("Linking %s to %s\n",theFile,newFile);
    return symlink(theFile,newFile);

}
int writeHeader(AnitaEventHeader_t *hdPtr, char *filename)
/* Writes the header pointed to by hdPtr to filename */
{
    return normalSingleWrite((unsigned char*)hdPtr,filename,sizeof(AnitaEventHeader_t));
}


int writePedSubbedBody(PedSubbedEventBody_t *bodyPtr, char *filename)
/* Writes the body pointed to by bodyPtr to filename */
{

    return normalSingleWrite((unsigned char*)bodyPtr,filename,sizeof(PedSubbedEventBody_t));

}




int main(int argc,char *argv[]){
  //int energy=1;
  //int exponent=20;
  char clswitch;
  if(argc>1){
    //energy=atoi(argv[1]);
    //exponent=atoi(argv[2]);
    //std::cout << "using energy " << energy << "e" << exponent << "eV" << std::endl;
    while((clswitch = getopt(argc, argv, "i:o")) != EOF) {
      switch(clswitch) {
       case 'i':
	input_file = string(optarg);
	break;
      case 'o':
	std::cout << "not used! Try -i" << std::endl;
	break;
      }
    }
    //waveformToPrioritizer(energy,exponent);
    std::cout << "running" << std::endl;
    waveformToPrioritizer(input_file);
  }
  else{
    //std::cout << "using default values for energy of 1e20eV" << std::endl;
    //waveformToPrioritizer(1,20);
    std::cout << "specify the input file please!!" << std::endl;
    return 0;
  }

}



  //void waveformToPrioritizer(int energy,int exponent) {
void waveformToPrioritizer(string input_file){
  AnitaEventCalibrator *cally = AnitaEventCalibrator::Instance();
  Int_t runNumber=0;
  UInt_t eventNumber=0;
  Int_t labChip=0;
  UInt_t whichPeds=0;
  Int_t firstHitbus=60;
  Int_t lastHitbus=67;

  //Use this to work out times of things
  UsefulAnitaEvent *baseEvent = new UsefulAnitaEvent();
  for(int surf=0;surf<9;surf++) {
    for(int chan=0;chan<9;chan++) {
      Int_t chanIndex=(9*surf) + chan;
      baseEvent->chanId[chanIndex]=chanIndex;
      baseEvent->chipIdFlag[chanIndex]=labChip; //RCO 0 and not wrapped
      baseEvent->firstHitbus[chanIndex]=firstHitbus;
      baseEvent->lastHitbus[chanIndex]=lastHitbus;
      for (Int_t i=0;i<260;i++) {
	baseEvent->data[chanIndex][i]=i;
      }
    }
  }

  baseEvent->calibrateEvent(WaveCalType::kVTFullJW);

  //for(int surf=0;surf<9;surf++) {
  //for(int chan=0;chan<9;chan++) {
      //      cout << baseEvent->fTimes[chan+9*surf][0] << endl;
  //}
  //}



  //Read fake events from here
  //change this to reading from stephens tree
  char fileName[FILENAME_MAX];
  double sim_times[32][2][256];
  double volts[32][2][256];
  double unsmeared_arrival_time[32];
  //sprintf(fileName,"/home/mottram/matt/AesopInterface/trunk/outputRootFiles/%de%doutput.root",energy,exponent);
  TFile *waveformFile = new TFile(input_file.c_str());
  TTree *simulated_event_tree = (TTree*)waveformFile->Get("simulated_event_tree");
  simulated_event_tree->SetBranchAddress("times",&sim_times);
  simulated_event_tree->SetBranchAddress("volts",&volts);
  simulated_event_tree->SetBranchAddress("unsmeared_arrival_time",&unsmeared_arrival_time);

  //make sure extra channels/samples set to zero
  //9th channel is for clock vals
  Float_t waveforms[9][9][260]={0};

  UInt_t numEntries = simulated_event_tree->GetEntries();
  int newChan;
  int newSurf;

  std::cout << "will make " << numEntries << " event and header files" << std::endl;


  makeDirectories(ACQD_EVENT_LINK_DIR);

  makeDirectories(EVENTD_EVENT_LINK_DIR);


  for(UInt_t entry=0;entry<numEntries;entry++){
    simulated_event_tree->GetEntry(entry);


    //update this????
    Float_t times[260];
    for(int samp=0;samp<260;samp++) {
      times[samp]=samp* (1./2.6);
    }


    AnitaEventHeader_t eventHeader;
    PedSubbedEventBody_t eventBody;


    Float_t wrapped[260];
    //   Float_t samples[260];
    //  Event loop
    //while(Test.read((char*)waveforms,sizeof(Float_t)*9*9*260)) { 
      //Event loop
      //read from root file

      //    break;

      //V to mV and set volts in terms of surf & chan
      //inside or outside while loop?
      for(int ant=0;ant<32;ant++){

        newSurf = AnitaGeomTool::getSurfFromAnt(ant);

        for(int pol=0;pol<2;pol++){

	  if(pol==0) newChan = AnitaGeomTool::getChanFromAntPol(ant,AnitaPol::kHorizontal);
	  else newChan = AnitaGeomTool::getChanFromAntPol(ant,AnitaPol::kVertical);

	  //printf("ant %d pol %d newSurf %d newChan %d\n",ant,pol,newSurf,newChan);

	  for(int samp=0;samp<260;samp++){
	    if(samp<256){
	      //could just use floats it the root file!
	      //waveforms[newSurf][newChan][samp] = static_cast<Float_t>(volts[ant][pol][samp]);
	      waveforms[newSurf][newChan][samp] = (volts[ant][pol][samp]);
	    }
	    else{
	      waveforms[newSurf][newChan][samp]=0.0;
	    }
	    //if(ant==1 && pol==1){
	    //printf("waveform value %e\n",waveforms[newSurf][newChan][samp]);
	    //}
	  }
        }
      }


      for(int surf=0;surf<9;surf++) {
        for(int samp=0;samp<260;samp++) {
  	  waveforms[surf][8][samp]=clockVals[samp];
        }
      }
      for(int chan=0;chan<8;chan++) {
        for(int samp=0;samp<260;samp++) {
	  waveforms[8][chan][samp]=discVals[chan][samp];
        }
      }  

      //Now make AnitaEventHeader_t and PedSubbedEvent_t and fill with useful info
      //what to do with the gHdr for each of the above??????
      //theEvent = new RawAnitaEvent();
      //theEvent->whichPeds=whichPeds;
      //theEvent->eventNumber=eventNumber++;
      eventBody.whichPeds=whichPeds;
      eventBody.eventNumber=entry;  

      unsigned long unixTime=0;
      unsigned long unixTimeUs=0;
      long gpsSubTime=0;
      unsigned short surfMask=0;
      unsigned short calibStatus=0;
      //      unsigned char priority=0;
      unsigned char turfUpperWord=0;
      unsigned char otherFlag=0;
      unsigned char otherFlag2=0;
      unsigned long antTrigMask=0;
      eventHeader.unixTime=unixTime;
      eventHeader.unixTimeUs=unixTimeUs;
      eventHeader.gpsSubTime=gpsSubTime;
      eventHeader.eventNumber=entry;
      eventHeader.surfMask=surfMask;
      eventHeader.calibStatus=calibStatus;
      //      eventHeader.priority=priority;
      eventHeader.turfUpperWord=turfUpperWord;
      eventHeader.otherFlag=otherFlag;
      eventHeader.otherFlag2=otherFlag2;
      eventHeader.antTrigMask=antTrigMask;


//////////////////////////////////////////////////////////////////////////////////////

      //JUST FOR INFORMATION      
//AnitaEventHeader_t has the following

//    GenericHeader_t gHdr;
//    unsigned long unixTime;       /* unix UTC sec*/
//    unsigned long unixTimeUs;     /* unix UTC microsec */
//    long gpsSubTime;     /* the GPS fraction of second (in ns) 
//			   (for the X events per second that get 
//			   tagged with it, note it now includes
//			   second offset from unixTime)*/
//    unsigned long eventNumber;    /* Global event number */
//    unsigned short surfMask;
//    unsigned short calibStatus;   /* Were we flashing the pulser? */
//    unsigned char priority; // priority and other
//    unsigned char turfUpperWord; // The upper 8 bits from the TURF
//    unsigned char otherFlag; //Currently unused 
//    unsigned char otherFlag2; //Currently unused 
//    unsigned long antTrigMask; // What was the ant trigger mask
//    TurfioStruct_t turfio; /*The X byte TURFIO data*/


//PedSubbedEventBody_t has:

//    GenericHeader_t gHdr;
//    unsigned long eventNumber;    /* Global event number */
//    unsigned long whichPeds; //whichPedestals did we subtract
//    SurfChannelPedSubbed_t channel[NUM_DIGITZED_CHANNELS];


//do I need to make a generic header as well??  What about the turfioStruct??
//typedef struct {
//    PacketCode_t code;    
//    unsigned long packetNumber; //Especially for Ped
//    unsigned short numBytes;
//    unsigned char feByte;
//    unsigned char verId;
//    unsigned long checksum;
//} GenericHeader_t;


//SurfChannelPedSubbed_t has:

//    RawSurfChannelHeader_t header;
//    short xMax;
//    short xMin;
//    float mean; //Filled by pedestalLib
//    float rms; //Filled by pedestalLib
//    short data[MAX_NUMBER_SAMPLES]; //Pedestal subtracted and 11bit data


///////////////////////////////////////////////////////////////////////////////////////


        
      for(int surf=0;surf<9;surf++) {
        for(int chan=0;chan<9;chan++) {
 	  //	cout << "\t" << surf << "\t" << chan << "\n";
	  Int_t chanIndex=(9*surf) + chan;
	  eventBody.channel[chanIndex].header.chanId=chanIndex;
	  eventBody.channel[chanIndex].header.chipIdFlag=labChip; //RCO 0 and not wrapped
	  eventBody.channel[chanIndex].header.firstHitbus=firstHitbus;
	  eventBody.channel[chanIndex].header.lastHitbus=lastHitbus;

	  //printf("chanId %d\t",eventBody.channel[chanIndex].header.chanId);
	  //printf("chipId flag %d\t",eventBody.channel[chanIndex].header.chipIdFlag);
	  //printf("firstHitBus %d\t",eventBody.channel[chanIndex].header.firstHitbus);
	  //printf("lastHitBus %d\n",eventBody.channel[chanIndex].header.lastHitbus);
	  //printf("",);


	  memset(wrapped,0,260*sizeof(Float_t));

	  //Prime interpolator
	  std::vector<double> tVec;
	  std::vector<double> vVec;
	
	  //	int lastValid=255;
	  for (int samp=0;samp<260;samp++) {
	    tVec.push_back(times[samp]);
	    vVec.push_back(waveforms[surf][chan][samp]);
	    if(chan==1 && surf==1){
	      //std::cout << samp << " " << times[samp] <<  " " << waveforms[surf][chan][samp] << std::endl;
	    }
	  
	  }
	  ROOT::Math::Interpolator chanInterp(tVec,vVec,ROOT::Math::Interpolation::AKIMA);

 	  for (Int_t i=0;i<260;i++) {
 	    if(baseEvent->fVolts[chanIndex][i]>0 || 1) {
	      Float_t itime=baseEvent->fTimes[chanIndex][i];
	      if(itime<0) {
	        itime+=times[255];
	      }
	      if(itime>times[255]) {
	        itime-=times[255];
	      }
	      int index=(int)baseEvent->fVolts[chanIndex][i];
	      wrapped[index]=chanInterp.Eval(itime);
	    }
	  }
	  wrapped[0]=wrapped[259];
	  for (Int_t i=0;i<260;i++) {
	    Short_t psADC=(Short_t) (wrapped[i]/(2*cally->mvCalibVals[surf][chan][labChip]));
	    eventBody.channel[chanIndex].data[i]=psADC;
	    if(chan==1 && surf==1){
	      //std::cout << i << " " << psADC << " " << wrapped[i] << std::endl;
	    }
	  }
	


	  eventBody.channel[chanIndex].xMax=TMath::MaxElement(260,eventBody.channel[chanIndex].data);
	  eventBody.channel[chanIndex].xMin=TMath::MinElement(260,eventBody.channel[chanIndex].data);
	  eventBody.channel[chanIndex].mean=TMath::Mean(260,eventBody.channel[chanIndex].data);
	  eventBody.channel[chanIndex].rms=TMath::RMS(260,eventBody.channel[chanIndex].data);

	   
	  	
	}
      
      }

      //std::cout << entry << " HeaderNumber " << eventHeader.eventNumber << " BodyNumber " << eventBody.eventNumber << std::endl;      

    sprintf(fileName,"%s/ev_%d.dat",ACQD_EVENT_DIR,entry);
    writePedSubbedBody(&eventBody,fileName);

    sprintf(fileName,"%s/hd_%d.dat",EVENTD_EVENT_DIR,entry);
    writeHeader(&eventHeader,fileName);

    makeLink(fileName,EVENTD_EVENT_LINK_DIR);


  }
}
